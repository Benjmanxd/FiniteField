#include "finitefield.cpp"
#include "finitefield.hpp"
#include <stdio.h>

int main()
{
    printf("=== Test 1 - InnerProd 1 ===\n");
    SymbolType tmp1[3] = { 0, 1, 2 };
    SymbolType tmp2[3] = { 1, 1, 1 };
    SymbolType inner1_1 = FiniteField::InnerProd(tmp1, tmp2, 3);
    SymbolType inner1_2 = FiniteField::InnerProd(tmp2, tmp1, 3);
    printf("tmp1 : { 0, 1, 2 } \t tmp2 : { 1, 1, 1 }\n");
    printf("InnerProd(tmp1, tmp2): %X\n", inner1_1);
    printf("InnerProd(tmp2, tmp1): %X\n", inner1_2);
    printf("\n");
    printf("=== Test 1 - InnerProd 2 ===\n");
    SymbolType tmp3[3] = { 0, 0, 0 };
    SymbolType tmp4[3] = { 1, 2, 3 };
    SymbolType inner2_1 = FiniteField::InnerProd(tmp3, tmp4, 3);
    SymbolType inner2_2 = FiniteField::InnerProd(tmp4, tmp3, 3);
    printf("tmp3 : { 0, 0, 0 } \t tmp4 : { 1, 2, 3 }\n");
    printf("InnerProd(tmp3, tmp4) : %X\n", inner2_1);
    printf("InnerProd(tmp4, tmp3) : %X\n", inner2_2);
    printf("\n");
    printf("=== Test 1 - InnerProd 3 ===\n");
    SymbolType tmp5[3] = { 1 };
    SymbolType tmp6[3] = { 3 };
    SymbolType inner3_1 = FiniteField::InnerProd(tmp5, tmp6, 3);
    SymbolType inner3_2 = FiniteField::InnerProd(tmp6, tmp5, 3);
    printf("tmp5 : { 1, 0, 0 } \t tmp6 : { 3, 0, 0 }\n");
    printf("InnerProd(tmp5, tmp6) : %X\n", inner3_1);
    printf("InnerProd(tmp6, tmp5) : %X\n", inner3_2);
    printf("\n");
    printf("=== Test 1 - InnerProd 4 ===\n");
    SymbolType tmp7[3] = {  };
    SymbolType tmp8[3] = { 1, 2, 3 };
    SymbolType inner4_1 = FiniteField::InnerProd(tmp7, tmp8, 3);
    SymbolType inner4_2 = FiniteField::InnerProd(tmp8, tmp7, 3);
    printf("tmp7 : { 0, 0, 0 } \t tmp8 : { 1, 2, 3 }\n");
    printf("InnerProd(tmp7, tmp8) : %X\n", inner4_1);
    printf("InnerProd(tmp8, tmp7) : %X\n", inner4_2);
    printf("\n");

    printf("=== Test 2 - MulElem 1 ===\n");
    SymbolType tmp9 = 0;
    SymbolType tmp10 = 3;
    SymbolType mul1_1 = FiniteField::MulElem(tmp9, tmp10);
    SymbolType mul1_2 = FiniteField::MulElem(tmp10, tmp9);
    printf("tmp9 : 0 \t tmp10 : 3\n");
    printf("mul_table_o8[3] : %X\n", mul_table_o8[3]);
    printf("mul_table_o8[768] : %X\n", mul_table_o8[768]);
    printf("MulElem(tmp9, tmp10) : %X\n", mul1_1);
    printf("MulElem(tmp10, tmp9) : %X\n", mul1_2);
    printf("\n");
    printf("=== Test 2 - MulElem 2 ===\n");
    SymbolType tmp11 = 3;
    SymbolType tmp12 = 3;
    SymbolType mul2_1 = FiniteField::MulElem(tmp11, tmp12);
    SymbolType mul2_2 = FiniteField::MulElem(tmp12, tmp11);
    printf("tmp11 : 3 \t tmp12 : 3\n");
    printf("mul_table_o8[771] : %X\n", mul_table_o8[(tmp11 << 8) + tmp12]);
    printf("mul_table_o8[771] : %X\n", mul_table_o8[(tmp12 << 8) + tmp11]);
    printf("MulElem(tmp11, tmp12) : %X\n", mul2_1);
    printf("MulElem(tmp12, tmp11) : %X\n", mul2_2);
    printf("\n");
    printf("=== Test 2 - MulElem 3 ===\n");
    SymbolType tmp13 = 3;
    SymbolType tmp14 = 5;
    SymbolType mul3_1 = FiniteField::MulElem(tmp13, tmp14);
    SymbolType mul3_2 = FiniteField::MulElem(tmp14, tmp13);
    printf("tmp13 : 3 \t tmp14 : 5\n");
    printf("mul_table_o8[773] : %X\n", mul_table_o8[772]);
    printf("mul_table_o8[1283] : %X\n", mul_table_o8[1282]);
    printf("MulElem(tmp13, tmp14) : %X\n", mul3_1);
    printf("MulElem(tmp14, tmp13) : %X\n", mul3_2);
    printf("\n");

    printf("=== Test 3 - DivElem 1 ===\n");
    SymbolType div1_1 = FiniteField::DivElem(tmp9, tmp10);
    SymbolType div1_2 = FiniteField::DivElem(tmp10, tmp9);
    printf("tmp9 : 0 \t tmp10 : 3\n");
    printf("div_table_o8[3] : %X\n", div_table_o8[3]);
    printf("div_table_o8[768] : %X\n", div_table_o8[768]);
    printf("DivElem(tmp9, tmp10) : %X\n", div1_1);
    printf("DivElem(tmp10, tmp9) : %X\n", div1_2);
    printf("\n");
    printf("=== Test 3 - DivElem 2 ===\n");
    SymbolType div2_1 = FiniteField::MulElem(tmp11, tmp12);
    SymbolType div2_2 = FiniteField::MulElem(tmp12, tmp11);
    printf("tmp11 : 3 \t tmp12 : 3\n");
    printf("div_table_o8[771] : %X\n", div_table_o8[771]);
    printf("div_table_o8[771] : %X\n", div_table_o8[771]);
    printf("DivElem(tmp11, tmp12) : %X\n", div2_1);
    printf("DivElem(tmp12, tmp11) : %X\n", div2_2);
    printf("\n");
    printf("=== Test 3 - DivElem 3 ===\n");
    SymbolType div3_1 = FiniteField::DivElem(tmp13, tmp14);
    SymbolType div3_2 = FiniteField::DivElem(tmp14, tmp13);
    printf("tmp13 : 3 \t tmp14 : 5\n");
    printf("div_table_o8[773] : %X\n", div_table_o8[773]);
    printf("div_table_o8[1283] : %X\n", div_table_o8[1283]);
    printf("DivElem(tmp13, tmp14) : %X\n", div3_1);
    printf("DivElem(tmp14, tmp13) : %X\n", div3_2);
    printf("\n");

    printf("=== Test 4 - InvElem 1 ===\n");
    SymbolType tmp15 = 0;
    SymbolType inv1 = FiniteField::InvElem(tmp15);
    printf("tmp15 : 0\n");
    printf("inv_table_o8[0] : %X\n", inv_table_o8[0]);
    printf("InvElem(tmp15) : %X\n", inv1);
    printf("\n");
    printf("=== Test 4 - InvElem 2 ===\n");
    SymbolType tmp16 = 20;
    SymbolType inv2 = FiniteField::InvElem(tmp16);
    printf("tmp16 : 20\n");
    printf("inv_table_o8[20] : %X\n", inv_table_o8[20]);
    printf("InvElem(tmp16) : %X\n", inv2);
    printf("\n");

    printf("=== Test 5 - MulVec 1 ===\n");
    SymbolType tmp17[3] = { 1, 2, 3 };
    SymbolType tmp18 = 2;
    FiniteField::MulVec(tmp17, tmp18, 3);
    FiniteField::Print(tmp17, 3, 'X');
    printf("=== Test 5 - MulVec 2 ===\n");
    SymbolType tmp19[3] = { 1, 2, 3 };
    SymbolType tmp20 = 0;
    FiniteField::MulVec(tmp19, tmp20, 3);
    FiniteField::Print(tmp19, 3, 'X');
    printf("=== Test 5 - MulVec 3 ===\n");
    SymbolType tmp21[3] = { 0, 0, 0 };
    SymbolType tmp22 = 2;
    FiniteField::MulVec(tmp21, tmp22, 3);
    FiniteField::Print(tmp21, 3, 'X');
}
